Здесь находятся скрипты, которые готовят документы корпуса для индексирования в Яндекс.SaaS, а также обрабатывают ответ поискового источника.

Предполагается, что исходные документы поступают в формате XML уже с морфологической и семантической разметкой. Скрипт xml2json.py преобразует их во внутреннее представление (которое хорошо ложится на формат JSON). В этом представлении документ (Doc) делится на части (Part), такие, что ожидаемые сниппеты всегда целиком лежат внутри части. Части делятся на предложения (Sent), предложения - на слова (Word). Слова могут иметь один или несколько разборов (Ana). У каждого элемента этой иерархии могут быть свои атрибуты (Attrs), которые представляют из себя словари вида "ключ - список значений".


Документы в этом формате пропускаются через специальные обработчики, которые обогащают разметку (например, проставляют у слов теги, связанные с наличием вокруг слов знаков препинания, с повтором тех или иных грамматических категорий, с позицией слова внутри предложения, наличием заглавной буквы и т. д.).


По ряду причин в SaaS документ поставляется тоже в формате XML. Точнее, в SaaS уходит multipart-запрос на индексацию с особым JSON, к которому прикрепляется XML с телом размеченного документа. В JSON-запросе описываются метаатрибуты этого документа, а также свойства (properties) - прикрепленные к документу данные (любой природы), которые будут отданы поиском, если документ будет найден. В таких свойствах мы храним "прямой" индекс - упакованную исходную JSON-структуру части документа, которая позволяет построить контекст найденных слов и узнать, какие атрибуты были приписаны словам в этом контексте. Упаковка производится через сжатие с помощью zlib и кодирование в base64.


Скрипты поиска server.py и search.py (front end, если угодно), получают с запрос пользователя с морды (http://ruscorpora.ru/beta/search-saas.html), формируют на его основе внутренний запрос к SaaS, получают ответ в формате protobuf (какие документы найдены + координаты хитов в этих документах + свойства, т. е., прямые индексы этих документов), составляют на его основе ответ со сниппетами. Далее этот ответ превращается в XML старого формата и верстается в HTML старой технологией на основе XSLT. Хочется в этом месте верстать HTML каким-либо шаблонизатором напрямую.

